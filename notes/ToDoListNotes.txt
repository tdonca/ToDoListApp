============================================================12/10/2018

To Do List App.

Features:
	Display entries in a List View
	Create new entries
	Delete entries
	Save user data so entries are persistent
	Create future reminder notifications (background)


------------------------------


1. Create list view for entries
	Linear Layout
	TextView objects as simple entries
	Tap TextView to delete
	Tap + button to add new entries in a new activity


Main Activity:
	Linear Layout of TextView objects
	Linear Layout Info: https://developer.android.com/reference/android/widget/LinearLayout


	I want on startup to load all saved tasks into memory, then create a TextView for
	each one to display in the linear layout

	Create TextView in onCreate():
		Create a TextView instance
		**Set its layout parameters by getting the LayoutParams of the parent view
		add to the target view with (target).addView(newView);


	Make Tasks Removeable:
		create an onClickListener that removes the view from the parent view when clicked
		new View.OnClickListener() { ...
		assign the listener to each task view object


	
	Create new tasks:

		Add FloatingActionButton from Basic Activity Template
			Requires a CoordinatorLayout	

===================================================================================12/11/18

		OnClick:
			launch a new activity that takes in a string and returns a new task to the main activity



Create Task Activity:
	
	using onClick in Main Activity
	first create a new activity in the project
	add it to the manifest, and set it as a child of the main activity

	create a new intent for the create task activity
		 Intent new_task_intent = new Intent(this, CreateTaskActivity.class);
        startActivityForResult(new_task_intent, TEXT_REQUEST);

    use callback for receiving the response:
    	public void onActivityResult( int request_code, int result_code, Intent data ){ ...




Store Tasks in a file on internal storage:
	
	maintain a file that holds the active tasks

	on app create:
		use BufferedReader on the file


	on app close:
		delete any existing file
		use BufferedWriter on the file

===============================================================================12/12/18


Find a way to uniquely access each task when it is tapped

Be able to remove a task from the data structure correctly when the TextView is tapped

================================================================================12/17/18


Learning about App Architecture Design:

O.O. Principles, Separation of Responsibility:
	Separate UI and Functionality

	Activity -> Context: Access to Platform Features and Resources

	Can't separate Functionality from Activity, so separate UI



Model-View-Presenter:
	
	Model - Data and internal processing / functionality

	View - Passive UI Display and Interaction Catching (Activity)

	Presenter - Communication between View and Model, handling view updates and user input processing




Splitting UI and Functionality using MVP:
	
	View displays tasks in order
	Presenter gets task names and order from Model
	Model gets strings from file and creates Task objects




View:
	MainActivity, NewTaskActivity
	OnCreate, loadUI objects
	onClick() stuff - call Presenter functions to handle

Presenter:
	call View functions to display tasks
	call View function to load new Activity
	receive deletedTask or newTasks calls
	add/remove tasks from Model

Model:
	load tasks from file
	receive new tasks from presenter
	save tasks to file on exit



====================================================================12/19/18


Using MVP todoapp example to implement MVP: https://github.com/googlesamples/android-architecture/tree/todo-mvp

Stick with One Activity Per UI View, and use Intents to pass model data - Parcelable/Serializeable

====================================================================12/20/18


Interative Progress:
	1. Get base functionality working (list view, adapter, adding/removing tasks, saving to file)
	2. Difference between Back button and finish() intent return for activity lifecycles
	3. Implement MVP w/ Intents between activities (w/ Serializeable)


1. Base Functionality
	
	Adapter for lists
		ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, values)

		1. Create the adapter that handles a set of data (ArrayList in this case)
		2. Assign the adapter to an existing viewgroup that will hold the UI elements
		3. Add data elements to the data (automatically added to views through adapter)

	Allow onClick events:
		create a onClick listener for the ListView directly, not the individual elements.
		This way the ListView can keep track of which element is clicked, allowing easy element modification without lookup

	Add elements:
		add using Adapter.add() to automatically display the new UI element

	Delete elements:
		remove using array index obtained from the ListView Elements
		remove from data source directly ArrayList.remove()
		** this means we have to update the adapter to remove the UI element
		Adapter.notifyDataSetChanged()
		since the adapter has a reference to an underlying array, it does not keep track of its modifications in real time, so we 
		have to tell it that the array changed


	Save tasks to file:
		Commons.io library
		import library through Gradle in app's build.gradle file:

			repositories {
    			...
    			mavenCentral()
			}
			... 
			dependencies {
				...
				implementation group: 'commons-io', name: 'commons-io', version: '2.6'
			}
				

		Read from file:
			get the app files directory using getFilesDir()
			create a File object for the file
			get an ArrayList of strings from the lines of the text file:
				arraylist = FileUtils.readLines(filename, "UTF-8");


		Write to file:
			use the elements of an ArrayList as lines to write to the text file:
				FileUtils.writeLines(filename, arraylist);

		***Always use try/catch exception handling when dealing with I/O***
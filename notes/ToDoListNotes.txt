============================================================12/10/2018

To Do List App.

Features:
	Display entries in a List View
	Create new entries
	Delete entries
	Save user data so entries are persistent
	Create future reminder notifications (background)


------------------------------


1. Create list view for entries
	Linear Layout
	TextView objects as simple entries
	Tap TextView to delete
	Tap + button to add new entries in a new activity


Main Activity:
	Linear Layout of TextView objects
	Linear Layout Info: https://developer.android.com/reference/android/widget/LinearLayout


	I want on startup to load all saved tasks into memory, then create a TextView for
	each one to display in the linear layout

	Create TextView in onCreate():
		Create a TextView instance
		**Set its layout parameters by getting the LayoutParams of the parent view
		add to the target view with (target).addView(newView);


	Make Tasks Removeable:
		create an onClickListener that removes the view from the parent view when clicked
		new View.OnClickListener() { ...
		assign the listener to each task view object


	
	Create new tasks:

		Add FloatingActionButton from Basic Activity Template
			Requires a CoordinatorLayout	

===================================================================================12/11/18

		OnClick:
			launch a new activity that takes in a string and returns a new task to the main activity



Create Task Activity:
	
	using onClick in Main Activity
	first create a new activity in the project
	add it to the manifest, and set it as a child of the main activity

	create a new intent for the create task activity
		 Intent new_task_intent = new Intent(this, CreateTaskActivity.class);
        startActivityForResult(new_task_intent, TEXT_REQUEST);

    use callback for receiving the response:
    	public void onActivityResult( int request_code, int result_code, Intent data ){ ...




Store Tasks in a file on internal storage:
	
	maintain a file that holds the active tasks

	on app create:
		use BufferedReader on the file


	on app close:
		delete any existing file
		use BufferedWriter on the file

===============================================================================12/12/18


Find a way to uniquely access each task when it is tapped

Be able to remove a task from the data structure correctly when the TextView is tapped

================================================================================12/17/18


Learning about App Architecture Design:

O.O. Principles, Separation of Responsibility:
	Separate UI and Functionality

	Activity -> Context: Access to Platform Features and Resources

	Can't separate Functionality from Activity, so separate UI



Model-View-Presenter:
	
	Model - Data and internal processing / functionality

	View - Passive UI Display and Interaction Catching (Activity)

	Presenter - Communication between View and Model, handling view updates and user input processing




Splitting UI and Functionality using MVP:
	
	View displays tasks in order
	Presenter gets task names and order from Model
	Model gets strings from file and creates Task objects




View:
	MainActivity, NewTaskActivity
	OnCreate, loadUI objects
	onClick() stuff - call Presenter functions to handle

Presenter:
	call View functions to display tasks
	call View function to load new Activity
	receive deletedTask or newTasks calls
	add/remove tasks from Model

Model:
	load tasks from file
	receive new tasks from presenter
	save tasks to file on exit



====================================================================12/19/18


Using MVP todoapp example to implement MVP: https://github.com/googlesamples/android-architecture/tree/todo-mvp

Stick with One Activity Per UI View, and use Intents to pass model data - Parcelable/Serializeable

====================================================================12/20/18


Interative Progress:
	1. Get base functionality working (list view, adapter, adding/removing tasks, saving to file)
	2. Difference between Back button and finish() intent return for activity lifecycles
	3. Implement MVP w/ Intents between activities (w/ Serializeable)


1. Base Functionality: https://guides.codepath.com/android/Basic-Todo-App-Tutorial
	
	Adapter for lists
		ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, values)

		1. Create the adapter that handles a set of data (ArrayList in this case)
		2. Assign the adapter to an existing viewgroup that will hold the UI elements
		3. Add data elements to the data (automatically added to views through adapter)

	Allow onClick events:
		create a onClick listener for the ListView directly, not the individual elements.
		This way the ListView can keep track of which element is clicked, allowing easy element modification without lookup

	Add elements:
		add using Adapter.add() to automatically display the new UI element

	Delete elements:
		remove using array index obtained from the ListView Elements
		remove from data source directly ArrayList.remove()
		** this means we have to update the adapter to remove the UI element
		Adapter.notifyDataSetChanged()
		since the adapter has a reference to an underlying array, it does not keep track of its modifications in real time, so we 
		have to tell it that the array changed


	Save tasks to file:
		Commons.io library
		import library through Gradle in app's build.gradle file:

			repositories {
    			...
    			mavenCentral()
			}
			... 
			dependencies {
				...
				implementation group: 'commons-io', name: 'commons-io', version: '2.6'
			}
				

		Read from file:
			get the app files directory using getFilesDir()
			create a File object for the file
			get an ArrayList of strings from the lines of the text file:
				arraylist = FileUtils.readLines(filename, "UTF-8");


		Write to file:
			use the elements of an ArrayList as lines to write to the text file:
				FileUtils.writeLines(filename, arraylist);

		***Always use try/catch exception handling when dealing with I/O***


2. Upload to Google Play Store

	Have to create keystore to sign package
		The keystore is located in: 
			/home/tudor/.android/appstorekeystore.jks
		Requires a password for the keystore, then a password for the specific app key
		The app key alias is:
			key0-mytasks

	Use Android Studio to build a release app bundle
	Fill out a bunch of information about the app on the Google Play Dashboard


====================================================================================12/21/18

Implement MVP on the single activity app:
	
	1. Activity = view
		Has direct functions for making UI changes
		Holds Adapters for data
		Has Instance of Presenter
			Presenter has instance of Model
			Presenter has reference to View


		Presenter Interface:
			Start
			SetModel
			LoadTasks
			AddTask
			RemoveTask



		View Interface:
			SetPresenter
			ShowTasks


		Model Interface:
			GetTasks
			AddTask
			RemoveTask


===================================================================================01/02/19

Why does the ArrayAdapter not update items from the underlying ArrayList?
	
	How does assigment of a new array affect the Adapter?
		ArrayAdapter holds the reference to the data source (array)
		If you assign a new array to the data variable:
			m_tasks = new ArrayList<>(otherarray);
		
		Then m_tasks does not reference the data used by the Adapter anymore
		Instead, clear the data in the current variable and add all of the elements from the other array:
			m_tasks.clear();
			m_tasks.addAll(otherarray);


========================================================================01/03/19

MVP with Multiple Activities:
	
	One View = One Activity

	TaskListView
	AddTaskView
	TaskDetailsView

	tasklist activity => add task activity


	Adding a new activity to the project:
		just go to File > New > Activity and fill out the info
		add activity to the Manifest
		set as child of main activity:
				<activity
		            android:name=".AddTaskActivity"
		            android:label="Create Task"
		            android:parentActivityName=".MainListActivity">
		            <meta-data
		                android:name="android.support.PARENT_ACTIVITY"
		                android:value="com.tudordonca.android.todolist.MainTaskList.MainListActivity" />
		        </activity>




	MainListActivity:
		onbuttonclick: 
			start createtask activity with result checking
			get back a bundle with just task name string for now
			add the task

	CreateTaskActivity:
		onbuttonclick:
			take input text and put it in the intent bundle to return
			finish activity


	Sequence:
		View, onbuttonclick -> Presenter, buttonFunction -> View, showNewActivityUI -> View, onActivityResult -> Presenter, addTask -> View, displayTasks


	Creating an Intent and launching a new activity:
		static final int NEW_TASK_REQUEST = 1;
		...
		Intent new_task_intent = new Intent(this, CreateTaskActivity.class);
        startActivityForResult(new_task_intent, TEXT_REQUEST);

        ...
        onActivityResult(){...}


    	
=====================================================================01/07/19

	
	Putting Data in a Bundle for an Intent result:
		The Intent has an internal Bundle:
			Bundle extras = intent.getExtras();


	In the receiving activity, get text and return in an intent bundle:
		create new intent object (NEVER REUSE!)
		add the string to the Intent extras
		set the Intent result to OK
		finish() the activity

----------------------------------------------


Background Async Processing and Network Connections:
	
	AsyncTask vs Loader:
			

 ^ pause this for now while I correct previous project using Steve's suggestions

=====================================================================01/08/19


Corrections:
	style: variable names use camel case:
			m_tasks_collection -> tasksCollection

	MVP: no model in this case, since the task items themselves are the model
		 use custom task views and RecyclerView in the UI View


	1. Remove Model Class
	2. Presenter has Tasks ArrayList (the model)
	3. Presenter creates files and reads/writes tasks
	4. Custom Item view
	5. RecyclerView


1,2,3. Remove model class and move stuff to presenter
	Data is the Model
	The Task variables are the Model(s)!
	Do file read/write in Presenter class (that's still just acessing the Model in the file)

4. Custom item view
	
	RecyclerView
	Layout Manager
	Custom Item Layout
	Adapter
	ViewHolder


	
------------------------------------------

Practice Creating a Test Recycler View in a new App:
	https://guides.codepath.com/android/using-the-recyclerview#creating-the-recyclerview-adapter
	https://developer.android.com/guide/topics/ui/layout/recyclerview


	add dependency in module build file:
		implementation 'com.android.support:recyclerview-v7:28.0.0'

	in Activity Java file:
		RecyclerView
	    RecyclerView.Adapter
	    RecyclerView.LayoutManager
	connect the layoutmanager and attach an adapter

	create an adapter for the custom item layout we created:
		class TaskAdapter extends RecyclerView.Adapter<TaskAdapter.TaskViewHolder>

	create a ViewHolder class inside the adapter:
		class TaskViewHolder extends RecyclerView.ViewHolder
	
	ViewHolder holds the view for each item in the RecyclerLayout


	TaskAdapter:
		Constructor
		ViewHolder class -> holds a set of data and metadata about it's location
		onCreateViewHolder() -> create new view
		onBindViewHolder() -> set new contents on an existing view
		getItemCount()

	ViewHolder:
		holds the overall "item view"
		has variables for all sub-view refrences within the item
		constructor uses findViewById() for these references

	onCreateViewHolder():
		has a LayoutInflater
			creates a view from a layout xml file
		always use an existing inflater from the context, DO NOT CREATE A NEW ONE
		use the inflater to inflate the item layout
			inflater.infalte(R.layout.task_item, parentView, false)
		returns a reference to a created ViewHolder with the inflated view

	onBindViewHolder():
		given a position in the dataset and a viewholder, update the viewholder with the new data




	Adding click functionality to items:
		Must attach an onclicklistener to the ViewHolder
		Deleting the item from within the viewholder might be problematic, so instead do the deletion code outside ofthe viewholder
			https://stackoverflow.com/questions/26076965/android-recyclerview-addition-removal-of-items
			


Avoiding data duplication and maintaining MVP with RecyclerView:
	Create Interface for the adapter's ViewHolder for the Presenter to use
	Give Adapter a reference to the Presenter
	onBindViewHolder() and getItemCount() just call presenter functions (passing the ViewHolder so presenter can call its UI update functions)
	onClick functions:
		have ViewHolder call presenter functions using a reference when click events happen


==================================================================01/09/19


Background Async Processing and Network Connections:
	
	Main Thread -> UI, User Input, LifeCycle
	Separate Thread -> Computations, File I/O, Network Comms

	ThreadPools -> App in Foreground processing tasks, not necessary to finish
	Foreground Serivce -> Immediate and important app work that can't be killed
	WorkManager -> Deferrable background tasks that must get completed, but not urgent


	AsyncTask:
		onPreExecute() - setup in UI thread
		doInBackground() - does the actual work in separate thread
		onPostExecute() - receive result from task back in the UI thread
		onCanceled() 

		define a subclass of AsyncTask that implements doInBackground and onPostExecute()

		Cancel the AsyncTask using cancel() from the calling thread
		doInBackground() has to check isCancelled() frequently to stop when requested!
		results in onCancelled() being called instead of onPostExecute()

		Pitfall: if caller activity is destroyed(configuration change - screen rotation), the result is lost
		and onPostExecute() never runs

		Uses:	
			1. Short or interruptible tasks
			2. Tasks that don't need to report back once done
			3. Low priority tasks that don't need to finish

		FOR ANYTHING IMPORTANT, use ASYNCTASKLOADER from LOADER framework



	AsyncTaskLoader:
		LoaderManager manages data loaders in the activity

		onCreateLoader()
		onLoadFinished()
		onLoaderReset()
		loadInBackground()

		Create a subclass of AsyncTaskLoader and implement the constructor and loadInBackground() 
			public static class StringListLoader extends AsyncTaskLoader<List<String>> {}

		Data survives configuration changes!


-----------------


AsyncTask test... sleep and update text:
	1. create SleeperAsyncTask class
		implement constructor, doInBackground(), onPostExecute()
		have a weak reference to the textview we want to update
		Thread.sleep() in doInBackground() for a set amount of time
		update text in onPostExecute() using the weak reference

	2. create instance of SleeperAsyncTask in Main Activity
		new SleeperAsyncTask(textView).execute();


====================================================================01/10/19


Use AsyncTask to make a network connection:
	
	making a URI request to Google Books
	
	Encapsulate the network commuincations in a NetworkUtils class
	Using a HttpURLConnection, BufferedReader
	URI request is a URL with the search parameters appended at the end



	Need App Permission to use Network Connections
	In AndroidManifest:
		<uses-permission android:name="android.permission.INTERNET" />
    	<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

    Parsing JSON using Java Libraries:
    	JSONObject
    	JSONArray
    	
    Minimize keyboard once user finishes typing:
    	InputMethodManager inputManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
        if(inputManager != null){
            inputManager.hideSoftInputFromWindow(view.getWindowToken(), InputMethodManager.HIDE_NOT_ALWAYS);
        }
        searchText.setText("");


    Double-Check connection availability before making any requests:



Using the Dropbox API:
	
	1. Add build dependency in build.gradle:
			implementation 'com.dropbox.core:dropbox-core-sdk:3.0.10'

	2. Register the app in the Dropbox API App Console: https://www.dropbox.com/developers/apps
		FirstAppTudor
		Save Dropbox App Key in the project strings.xml

	3. TESTING ONLY: generate a direct acess token from Dropbox App Console

***********************************************
DO NOT MAKE PROJECT PUBLIC TO GITHUB
************************************************

		This avoids having to use Oauth2 to log in to Dropbox
		THIS IS UNSAFE!!!

	4. Create a Dropbox Client:
		DbxRequestConfig config = DbxRequestConfig.newBuilder("FirstAppTudor/1.0").build();
        DbxClientV2 client = new DbxClientV2(config, ACCESS_TOKEN);





===========================================================================01/11/19
	
	5. Download file from Dropbox:
		File tasksFile = new File(filePath, fileName);
		OutputStream outputStream = new FileOutputStream(tasksFile);
		client.files().download("/" + fileName.toLowerCase()).download(outputStream);
		***Don't forget about exception handling and closing the Stream***



	6. Upload file to dropbox:
		client.files().uploadBuilder("/" + fileName).uploadAndFinish(inputStream);
		***Don't forget about exception handling and closing the Stream***



Enabling Dropbox account login using OAuth2:
	*****FILL OUT THE DETAILS SO I DON"T FORGET**************
	*********************************************************
	
==========================================================================01/13/19


ToDoList Redesign:
	1. TaskList Activity 
		Keep simple view with main activity add task button at the bottom
		App Action Bar - overflow menu
		Add list option for dropbox activity
			Use this in Activity to load a menu.xml file with the option added:
				public boolean onCreateOptionsMenu(Menu menu) {
			        // Inflate the menu; this adds items to the action bar if it is present.
			        getMenuInflater().inflate(R.menu.menu_main, menu);
			        return true;
			    }
		The onClick function requires a MenuItem, not a View:
			public void dropboxBackup(MenuItem mi){...}


	2. DropboxBackup Activity
		add dropbox libraries as an app dependency:
			implementation 'com.dropbox.core:dropbox-core-sdk:3.0.10'
		register the app on the dropbox website
		save app key to strings.xml


		copied over stuff from the OAuth2 App
		create AsyncTask to get account info and saved tasks:

=========================================================================01/13/19
	
		hold async task in Presenter




Specifications:
	MainActivity:
		onCreate():
			presenter - create dbclient (factory)
			presenter - load tasks (db file or local file)
			view - set up recycler view

		onResume():
			presenter - resume
			view - showTasks

		onClick():
			remove - view - remove from recyclerview and update UI - presenter - remove task
			add - presenter - add task - view - update recyclerview
			dropbox - presenter - call view launch db activity

		onPause():
			presenter - save tasks to file or dropbox based on shared preferences



	DropboxAccountActivity:
		onCreate():
			presenter - get shared preferences and access token if already logged in
			view - set up account display

		onResume():
			view - get shared prefs from Android
			presenter - if shared prefs, load data - view - show account info and logout options
						if no prefs, view - show login options



		onClick():
			login - presenter - dbclient download file
					if db file exists - download it and save tasks to db-local-file - save shared prefs of login and token
					if no db file - save shared prefs login and token
				  - view - finish activity and return bool overwrite and file of tasks
			logout - presenter - update shared prefs
			       - view - finish activity
 


			       
	

	Shared Preferences:
		Create the prefs file:
			private String sharedPrefFile = "com.example.android.hellosharedprefs";
			mPreferences = getSharedPreferences(sharedPrefFile, MODE_PRIVATE);

